Malware Attacks
---------------

=> piece of code that does something that we do not want it to do, and it usually does it
   without our consent

- classification by their infection vector
    - virus
        - attaches to a file or to an executable process so that it can execute itself
        - relies on user interaction -> must be clicked by the user
    - worm
        - infects a process in memory and tries to replicate itself without user interaction
          by scanning the network for potential vulnerabilities that they can further exploit
          so that they can infect new hosts on the network
    - trojans
        - appear to be good software, but are packaged with some bad code as well
        - hidden in a legitimate installation
    - preinstalled bloatware, 'grayware'
        - potentially unwanted programs annoying the user
        - makes you buy stuff, replaces the home page of your browser
        - doesn't necessarily do anything malicious but is annoying
        - potentially impacts performance

- viruses
    - based on a file
    - infects an executable file
    - waits for the user to execute it
    - executes with the user's privileges
    - types
        - file-based: infecting executable files, office documents with macros
        - memory-based: sometimes they do not persist on the disk, but attach themselves to
                        running processes in memory
                        -> they still start of as an infected executable file
        - boot sector-based: infected USB sticks or hard drives
        - script or macro-based: hidden in valid scripts, or are embedded in office documents
        - multipartite: uses multiple vectors
        - polymorphic: can dynamically change their code
            - traditional antivirus tools are looking for static signatures
            - if they find a certain sequence of bytes, then they mark the file as malicious
            - if the code of that virus changes, then static signature matching is hard

- worms
    - mainly reside in memory as running processes
    - they live as long as the host is running
    - they try to propagate themselves
    - propagation requires exploitation of vulnerabilities across devices on that network
    - usually designed to attack specific vulnerabilities
    - often exploiting known vulnerabilities, relying on the fact that users don't update

- memory-resident fileless malware
    - uses the disk to launch the attack, execute some code or download some malware
    - you will probably find some evidence of compromise on the disk as well, or e.g. in the
      windows registry (hierarchical database that stores low-level settings for the Microsoft
      Windows operating system and for applications that opt to use the registry)
    - usually based on shellcode: a small piece of executable code that can be passed in web
      requests/replies and does not need a physical file on the disk
        - a series of commands (just a few) that can be executed by the default interpreter
          on a platform (like cmd or sh)
        - downloads the rest of the payload
    - living-off-the-land: can use locally-available OS tools for text processing,
      cryptography, these utilities are already present on most operating systems












- spyware
    - monitors the host's activity
    - does not disturb the regular processes
    - e.g.
        - keylogger: program that runs hidden and catches your key strokes sending them back
                     to the attacker
        - adware: questionable, not malicious but still tracks your habits
        - tracking cookies: questionable
            - used by most web applications
            - small pieces of code injected into web requests and replies that identify some
              session information
            - some track your behavior and report it back
            - it is spyware, but does not do explicit harm

- backdoor
    - designed to give access to an attacker from the system -> ensures remote access
    - also called a Remote Access Trojan
    - probably hidden, looks like a legitimate process
    - can execute code the infected device
    - not malicious by themselves, they only give access to the attacker who will probably
      perform malicious actions using this remote access
    - C&C (command and control) (C2)
        - your workstation is likely to become part of a botnet -> a network under the
          attacker's control that can be used perform large-scale attacks (DoS, spam)
        - network traffic is sometimes the only IoC (indicator of compromise)
        - there are some signatures of C2 traffic that can be detected
        - or you can just look at the IPs that your machine is communicating with -> probably
          already part of some blacklist
        - usually HTTP, you can hide anything in HTTP
        - IRC: more obscure, but kind of easy to detect, because it is not really used anymore
        - DNS: allowed pretty much everywhere
            - instead of asking for domain name resolutions, you can use the same protocol,
              the same ports to talk to someone
        - social media: nowadays also used for communication
            - a specific twitter or facebook account posts some random text that is probably
              not even understandable to us, but they have some instructions embedded in them
            - only the compromised devices (infected by the owner of the twitter account) know
              how to interpret these commands
            - sometimes the RAT goes online, goes to facebook and checks whether that account
              has posted something new
            - looks like a perfectly legitimate user behavior
    - this kind of persistency, where you have some remote access trojan installed on your
      host that the attacker can contact at any time is usually the persistence establishment
      phase in an ATP attack (advance persistent threat)

- rootkit
    - replaces or infects operating system files
    - advantage is that operating system files run with the highest privilege
    - whenever that piece of code is executed, the attacker gains root access
    - on windows, this is not that straightforward
        - we have administrator privileges owned by the administrator -> admin privileges
        - and we have SYSTEM privileges -> system files run under this account
        - admin privileges are slightly lower than SYSTEM privileges
        -> admin execution is not enough to hide the malware (has not enough privileges to
           hide itself from the rest of the system)
        => on windows, a rootkit is a malware executed with SYSTEM privileges
    - relies on replacing operating system files
    - not simple to do, most OS files are digitally signed
    - has to be done by exploiting some vulnerability that allows for a regular user to run
      code with SYSTEM privileges -> code injection
    - if it is part of the system files, it can hide itself, it can tell the OS not to show
      it, not to show the open ports, not to show the running service, ...
    => really hard to detect

- ransomware (cryptolockers)
    - when they infect your device, they start encrypting your files
    - then it shows you a popup screen that if you don't pay up, then your files are lost
      forever
    - even if you pay, they are not obligated to give you the key
    - very dangerous
    - people usually don't have up-to-date backups
    => make safe backups, then it does not matter if the originals are destroyed

- crypto-malware
    - installs cryptocurrency mining software on your machine
    - easily detected by extreme resource usage
    - but attackers can limit the resource usage so that it is not that visible

- logic bomb
    - does not execute itself right away
    - schedules itself to execute in the future or when some conditions are met
    - an employee can install such a software so that when they are fired it executes
        - e.g. every week it checks the list of valid users, and if their username is not
               listed, then it is triggered

- detecting malware
    - anti-virus solutions
        - can detect a lot of things
        - including endpoint protection suites -> these are the ones that make your computer
          work crappy, but it checks all of your files, emails and services
        - strongly dependent on static signatures
        => keep your database up-to-date
    - sandbox
        - an isolated environment, a virtual machine
        - designed to execute malware inside of them in an isolated way
        - it executes a program and monitors its behavior and reports whether it is legitimate
        - useful if you don't have signatures
        - or even if you don't match the file using your database, that does not mean that it
          is not a malware
    - resource monitoring
        - crypto mining
        - launching denial of service attacks
        - or the malware is just poorly written
    - file system monitoring
        - file integrity monitoring
        - e.g. tripwire
            - monitors system and user files based on calculated hashes
            - calculates the hashes, stores them in a local database
            - if the hashes of those files change, there is a good chance that a malware
              changed them
            - whenever the OS is updated and changes its own files, then the local database is
              also updated with the new hashes
    - network traffic analysis
        - there probably is some network traffic back to the attacker or between hosts
    - process analysis
        - you need to have a list of approved processes for this method to work
        - new processes might need to be examined
        - you probably also need a whitelist of applications that users commonly install