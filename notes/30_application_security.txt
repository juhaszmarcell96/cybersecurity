Application Security
--------------------

- software is the root of all bugs -> was the software designed with security in mind?
- most vulnerabilities do not appear in the protocols, but in very specific versions of software releases or operating systems

- hacking : using a device/software/service in an other way than it was intended to be used
    - originally, it did not have malicious intent attached to it

- hacking applications
    - exploiting vulnerabilities that break CIA (confidentiality, integrity, availability)
    - how is it conducted? -> executing code
        - ACE : arbitrary code execution
        - RCE : remote code execution
    - when a user uses a service or an application, they are executing that application's code
    - a hacker tricks the application execute a code that did not originally belong to it
        - the application makes the OS is execute the code

- application privileges
    - whenever an application is executing a code, it executes with the privileges of the
      application
    - applications need privileges to access resources and data
    - there are user accounts and machine accounts
        - applications started by the user are running with the user's privileges
        - other applications started by the system are running with built-in account's privileges
    - privilege escalation (PE)
        - ACE or RCE only execute code with the running application's privileges
            - once the hacker has access, the next step is finding a way to escalate privileges
        - vertical PE -> from user to admin
        - horizontal PE -> from user to another user
    - privilege escalation can be detected in logs
        - SIEM solutions should be able to detect these

=> you need to find the balance, you need just enough privileges for the application to run as intended, while also have as minimal privileges as possible so that attackers cannot gain too much privileges if they manage to hack the application

- application errors
    - will happen, no way to avoid them completely
    - must be handled in code -> exception handling
    - must not reveal detailed information to the user
        - during development, it is useful to get as much info as possible
        - when the program becomes live, these messages should not be there anymore
            - don't dump the entire stack trace
            - don't give the file and SQL query information to the attackers
            - don't log usernames and passwords
            - don't give specific error messages, e.g. wrong username, but rather more generic ones, such as e.g. login attempt failed

- input validation
    - the root of all evil, attackers need to send data to the applications they want to hack -> input
        - string, images, files, ...
    - validate on server-side, not on client-side
        - client-side validation can by avoided
        - do some validation on client-side as well, but don't rely solely on it
    - risk of overflows, code injection, errors, DoS

- buffer overflow
    - a buffer is a pre-allocated amount of memory, prepared to store some data
    - if there is more data than space in the buffer, the software can simply overwrite data that comes after the buffer, if the boundaries are not checked
    - buffers, pointers, boundary checks
    - stack overflow: data does not fit into the stack anymore (a type of buffer overflow error that occurs when a computer program tries to use more memory space in the call stack than has been allocated to that stack)

            Higher Memory Addresses
            +----------------------+  <- 0xFFFFFFFF (Typical for 32-bit systems)
            |         Stack        |  <- Grows downward (toward lower addresses)
            |          ...         |
            |    Function Calls    |
            |    Local Variables   |
            |vvvvvvvvvvvvvvvvvvvvvv|
            |                      |
            |                      |
            |                      |
            |^^^^^^^^^^^^^^^^^^^^^^|
            |         Heap         |  <- Grows upward (toward higher addresses)
            |          ...         |
            |     Dynamically      |
            |    Allocated Data    |
            +----------------------+
            |  BSS (Uninit. Data)  |  <- Global/static uninitialized variables
            +----------------------+
            |  Data (Initialized)  |  <- Global/static initialized variables
            +----------------------+
            |         Text         |  <- Executable code (Read-Only)
            |        (Code)        |
            +----------------------+  <- 0x00000000 (Typical for 32-bit systems)
            Lower Memory Addresses (Near 0x00000000)

    - stack also stores the return address of functions, as well as function arguments, then come the local variables

            +-----------------------+
            |  Return Address       | <- Saved return address (where function will return)
            +-----------------------+
            |  Function Parameter 1 | <- Passed argument (e.g., int param1)
            +-----------------------+
            |  Function Parameter 2 | <- Passed argument (e.g., int param2)
            +-----------------------+
            |  Local Variable 1     | <- Any additional local variables
            +-----------------------+
            |  buf[2]               | <- 3rd element (Highest index) of buf[3]
            +-----------------------+
            |  buf[1]               | <- 2nd element
            +-----------------------+
            |         ...           |
    
    - buffers are stored as shown above, so a buffer overflow is capable of overwriting the function return address -> execution can jump the an injected memory address
    - now, in modern devices, there is a feature called ASLR (address space layout randomization), which makes successful buffer overflow attacks much harder, because attackers do not know the address in memory where they need to jump to execute their injected code -> what they can do is to inject a bunch of NOP operations before the malicious code, so that they have a larger hit area -> when jumping to any of those instruction, the execution will just slide over them ("NOP sled") and hit the malicious code anyway => no need to pinpoint exact locations

- mitigating buffer overflows
    - input validation
    - safer programming languages (memory-safe languages)
    - safe functions
        - even not inherently memory-safe languages offer safe function for e.g. copying data between buffers
        - protects the function return address
    - ASLR (address space layout randomization)
    - stack canary
        - value placed on the stack, if this value is overwritten, a buffer overflow occurred
    - DEP (data execution prevention)
        - stack is simply not executable

- integer overflow
    - what happens when an integer at it's max value is incremented?
        - does it wrap around?
        - does it cap at max value?
        - is it undefined?
    - can lead to issues
        - e.g. too much product added to the shopping card -> price sum overflows -> only a few dollars

- null pointer dereferencing
    - pointer: a variable that stores a memory address
    - getting access to the memory pointed to by that address is called dereferencing the pointer
    - a null pointer points to the address 0
    - null pointers cannot be dereferenced -> programming error or malicious overflow
        - program crashes when a null pointer is dereferenced
    - can cause a DoS attack at most

- race conditions
    - result of a process depends on the order of the execution of parallel running threads
        - poorly synchronized threads -> order cannot be determined -> race condition
    - TOC/TOU exception (Time-of-Check / Time-of-Use)
        - data changes after you checked it but before you use it
        - these two operations must be one single atomic operation
            - executed together without interruption or not at all

- memory leaks
    - dynamically allocated memory is not released after use
    - "malloc without free" or "new without delete"
    - if this continuously happens over time, the software is going to run out of available memory
    -> system crash
    - most of the time it is accidental
        - can be malicious as well, e.g. badly written malware

- DLL injection
    - dynamically-linked library
    - DLL name comes from windows, they are called shared libraries on linux
    - DLLs are external libraries that get loaded and executed at runtime
    - DLL injection means that a malicious DLL is loaded by the software
        - e.g. replace the DLL file on the filesystem

- pass-the-hash (PtH)
    - collecting cached credentials (SAM database) from compromised hosts and reusing in SSO systems
        - Single Sign-On systems assign tokens to users after authentication, which allows them to further authenticate themselves without needed to enter the credentials again
        - these tokens are cached on the local machine and might get stolen and presented to other services by an attacker
    - collect hash of user credentials and present it to the SSO system from another computer, without knowing the password
    - NTLM hashes vulnerable to PtH (legacy compatibility)
        - NTLM: a suite of Microsoft security protocols intended to provide authentication, integrity, and confidentiality to users
        - not used by modern windows systems, but might still be enabled for backward compatibility